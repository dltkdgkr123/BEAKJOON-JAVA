/*
  사방을 0,1,2,3으로 놓고 각 방향에 따른 x,y좌표 처리 후 이동거리로 이루어진 직사각형 크기 return
  
  deltaRow, deltaCol 좌표배열을 사용하는 방법을 사용하지 않으려고 했으나, 결국 비슷한 동작으로 구현되었다.
  
  테케 번호를 출력할 필요가 없을때 while문으로 처리, 잊어버렸던 변수 다중선언을 상기했다.
*/

import java.util.Scanner;

public class Main {
		
	public static void main(String[] args) {

		Scanner sc = new Scanner(System.in);
		
		int tc = sc.nextInt();
		
		while(tc--> 0)
		{
			String move = sc.next();
			int x = 0, y = 0;
			int x_max = 0, x_min = 0, y_max = 0, y_min = 0;
			int dir = 0;

			
			for(int i=0;i<move.length();i++)
			{
				char forward = 'N';
				switch(move.charAt(i))
				{
				case 'L':
					dir = ++dir%4; break;
				case 'R' :
					dir = --dir%4;
					if(dir==-1)
						dir = 3; break;
				case 'F' :
					forward = 'F'; break;
				case 'B' :
					forward = 'B'; break;
					
				}
	
				if(forward == 'N')
					continue;
				
				int val = (forward == 'F')? 1 : -1;
				
				switch(dir)
				{
				
				case 0 :
					y -= val; 
					y_max = Math.max(y, y_max);
					y_min = Math.min(y, y_min);
							break;
				case 1 :
					x += val;
					x_max = Math.max(x, x_max);
					x_min = Math.min(x, x_min);
							break;
				case 2 :
					y += val;
					y_max = Math.max(y, y_max);
					y_min = Math.min(y, y_min);
							break;
				case 3 :
					x -= val;
					x_max = Math.max(x, x_max);
					x_min = Math.min(x, x_min);
							break;
				
				}
				
				
			}			
			
			System.out.println(Math.abs((y_max-y_min)*(x_max-x_min)));
		}
	}
}



