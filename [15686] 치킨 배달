import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {
	
	static int M;
	static PriorityQueue<Integer> answer = new PriorityQueue<>();
	static List<LinkedList<Integer>> ways = new LinkedList<>();
	static int[] chickens = null;
	public static void main(String[] args) throws IOException {
		
	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	StringTokenizer st = new StringTokenizer(br.readLine());
	List<int[]> home = new LinkedList<>();
	List<int[]> chicken = new LinkedList<>();

	int N = Integer.parseInt(st.nextToken());
	M = Integer.parseInt(st.nextToken());
	chickens = new int[M];
	
	for(int i=0;i<N;i++) {
		st = new StringTokenizer(br.readLine());
		
		for(int j=0; j<N; j++) {
			int e = Integer.parseInt(st.nextToken());
			if(e == 0) continue;
			
			if(e == 1) home.add(new int[] {i,j});
				else chicken.add(new int[] {i,j});
		}
	}
	
	for(int i=0; i<chicken.size(); i++) {
		ways.add(new LinkedList<>());
		for(int j=0; j<home.size(); j++) {
			ways.get(i).add(Math.abs(home.get(j)[0]-chicken.get(i)[0]) + Math.abs(home.get(j)[1]-chicken.get(i)[1]));
		}
	}
		nCr(0, 0);
		System.out.println(answer.peek());
	}
	
	static void nCr (int cnt, int start) {
		
		if(cnt==M) {

			int sum = 0;
				int[] tmp = new int[ways.get(0).size()];
				for(int i=0; i<tmp.length; i++)
					tmp[i] = Integer.MAX_VALUE;
			
			for(int i=0; i<ways.get(0).size(); i++) {
				for(int j=0; j<chickens.length; j++)
					tmp[i] = Math.min(ways.get(chickens[j]).get(i), tmp[i]);
			}
			
			for(int i=0; i<tmp.length; i++)
				sum += tmp[i];
			
			answer.offer(sum);
			return;
		}
		
		for (int i=start; i<ways.size(); i++) {
			chickens[cnt] = i;
			nCr(cnt+1, i+1);
		}
	}
}




/* 수정 전 코드

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main2 {
	
	static PriorityQueue<Integer> answer = new PriorityQueue<>();
	public static void main(String[] args) throws IOException {
		
	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	StringTokenizer st = new StringTokenizer(br.readLine());
	List<int[]> home = new LinkedList<>();
	List<int[]> chicken = new LinkedList<>();
	List<LinkedList<Integer>> ways = new LinkedList<>();
	List<LinkedList<Integer>> ways2 = new LinkedList<>();
	
	int N = Integer.parseInt(st.nextToken());
	int M = Integer.parseInt(st.nextToken());
	
	for(int i=0;i<N;i++) {
		st = new StringTokenizer(br.readLine());
		
		for(int j=0; j<N; j++) {
			int e = Integer.parseInt(st.nextToken());
			if(e == 0) continue;
			
			if(e == 1) home.add(new int[] {i,j});
				else chicken.add(new int[] {i,j});
		}
	}
	
	for(int i=0; i<chicken.size(); i++) {
		ways.add(new LinkedList<>());
		for(int j=0; j<home.size(); j++) {
			ways.get(i).add(Math.abs(home.get(j)[0]-chicken.get(i)[0]) + Math.abs(home.get(j)[1]-chicken.get(i)[1]));
		}
	}
		nCr(ways, ways2, M, 0);
		System.out.println(answer.peek());
	}
	
	static void nCr (List<LinkedList<Integer>> ways, List<LinkedList<Integer>> ways2, int cnt, int start) {
		
		if(cnt==0) {
			int tmp = 0;
			int[] min = new int[ways2.get(0).size()];
			for(int i=0; i<min.length; i++)
				min[i] = Integer.MAX_VALUE;

			for(int i=0; i<ways2.get(0).size(); i++) {
				for(int j=0; j<ways2.size(); j++) {
					min[i] = Math.min(ways2.get(j).get(i), min[i]);
				}
			}
			
			for(int i=0; i<min.length; i++)
				tmp += min[i];
				
			answer.offer(tmp);
			return;
		}
		
		for (int i=start; i<ways.size(); i++) {
			ways2.add(ways.get(i));
			nCr(ways, ways2, cnt-1, i+1);
		}
	}
}


*/
